<?xml version="1.0" encoding="UTF-8"?>

<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- <global-method-security pre-post-annotations="enabled" /> -->
	
	
	<!-- Stateless RESTful service using Basic authentication -->
	
	<http pattern="/rest/**" create-session="stateless" security="none"/>
	
	<!-- 
		entry-point-ref="digestEntryPoint" >
		<http-basic />
		<custom-filter ref="digestFilter" after="BASIC_AUTH_FILTER" />
	</http>

	<beans:bean id="digestFilter"
		class="org.springframework.security.web.authentication.www.DigestAuthenticationFilter">
		<beans:property name="userDetailsService" ref="userService" />
		<beans:property name="authenticationEntryPoint" ref="digestEntryPoint" />
	</beans:bean>

	<beans:bean id="digestEntryPoint"
		class="org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint">
		<beans:property name="realmName"
			value="Contacts Realm via Digest Authentication" />
		<beans:property name="key" value="acegi" />
	</beans:bean>

-->
	<!--End of RESTful configuration -->

	<http use-expressions="true">
		<intercept-url pattern="/" access="permitAll" />
		<intercept-url pattern="/index.jsp" access="permitAll" />
		<intercept-url pattern="/login" access="permitAll" />
		<intercept-url pattern="/regForm" access="permitAll" />
		<intercept-url pattern="/resources/**" access="permitAll" />
		<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/**"
			access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" />
		<form-login login-page="/login" authentication-failure-url="/login?login_error=t" authentication-success-handler-ref="redirectRoleStrategy"
			default-target-url="/home" login-processing-url="/et_login"/>
		<logout delete-cookies="JSESSIONID" logout-url="/et_logout" logout-success-url="/login"/>

		<!-- Uncomment to limit the number of sessions a user can have -->
		<session-management invalid-session-url="/login"
			session-fixation-protection="migrateSession">
			<concurrency-control max-sessions="100"
				error-if-maximum-exceeded="true" expired-url="/login"
				session-registry-ref="etSessionRegistry" />
		</session-management>
	</http>

	<authentication-manager alias="etAuthenticationManager">
		<authentication-provider ref="etAuthenticationProvider" />
	</authentication-manager>


	<!--Security user permissions and method security to iplement -->
	<!-- <global-method-security pre-post-annotations="enabled"> -->
	<!-- <expression-handler ref="expHandler" /> -->
	<!-- </global-method-security> -->
	<!-- <beans:bean id="expHandler" -->
	<!-- class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler"> -->
	<!-- <beans:property name="permissionEvaluator" -->
	<!-- ref="expenseTrackerPermissionEvaluator" /> -->
	<!-- </beans:bean> -->
	<util:properties id="roleUrlMap" location="classpath:roleUrlMap.properties"/>
	<beans:bean id="etSessionRegistry" class="com.pk.et.infra.security.ETSessionRegistry"/>
	<beans:bean id="redirectRoleStrategy" class="com.pk.et.infra.security.RoleBasedAuthenticationSuccessHandler"/>
	
	<beans:bean id="passwordEncoder"
			class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
		<beans:constructor-arg value="256" />
	</beans:bean>
		
	<beans:bean id="securityManager" class="com.pk.et.infra.security.SecurityManager"/>
		
		
	<beans:bean id="etAuthenticationProvider"
		class="com.pk.et.infra.security.ETDaoAuthenticationProvider">
		<beans:property name="userDetailsService" ref="userService" />
		<beans:property name="saltSource" ref="saltSource" />
		<beans:property name="passwordEncoder" ref="passwordEncoder" />
	</beans:bean>
	
	<beans:bean id="saltSource"
		class="org.springframework.security.authentication.dao.ReflectionSaltSource">
		<beans:property name="userPropertyToUse" value="getSalt" />
	</beans:bean>
</beans:beans>