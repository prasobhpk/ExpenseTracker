/**
 * 
 */
package sgcib.clips.reporting;

import java.lang.reflect.Field;

import sgcib.clips.shared.util.ClipsTechnicalException;

/**
 * FieldReportableDataProperty
 * 
 */
public class FieldReportableDataProperty extends ReportableDataProperty {

	final private Field field;

	public FieldReportableDataProperty(final Field field) {
		this.field = field;
	}

	@Override
	public Object getValue(final Object object) {
		Object value = null;

		if (object != null) {
			try {
				value = this.field.get(object);
			} catch (final IllegalArgumentException exc) {
				throw new ClipsTechnicalException(exc);
			} catch (final IllegalAccessException exc) {
				throw new ClipsTechnicalException(exc);
			}
		}
		return value;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((this.field == null) ? 0 : this.field.hashCode());
		return result;
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final FieldReportableDataProperty other = (FieldReportableDataProperty) obj;
		if (this.field == null) {
			if (other.field != null) {
				return false;
			}
		} else if (!this.field.equals(other.field)) {
			return false;
		}
		return true;
	}
}
